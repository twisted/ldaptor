# Ldaptor schema file
#
# OID 1.3.6.1.4.1.22024.1.1 is reserved for Ldaptor.
#
# Under that, the following apply:
#
# .1 = attributeTypes
# .2 = objectClasses
#

# Time format is like with modifyTimestamp: "YYYYMMDDHHMMSSZ", for
# example "20050117143623Z".  The actual format is only documented in
# CCITT Rec. X.208 and/or ISO/IEC 8824, which seems to cost
# 136â‚¬. NICE! For now, let's hope nothing uses anything more complex
# than the simplest possible format.

# If validFrom or validUntil is not set, the defaults are -infinity
# and infinity.

attributetype ( 1.3.6.1.4.1.22024.1.1.1.1
	NAME 'validFrom'
        DESC 'Authentication is possible only after this time'
        EQUALITY generalizedTimeMatch
        ORDERING generalizedTimeOrderingMatch
        SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
        SINGLE-VALUE )

attributetype ( 1.3.6.1.4.1.22024.1.1.1.2
	NAME 'validUntil'
        DESC 'Authentication is possible only before this time'
        EQUALITY generalizedTimeMatch
        ORDERING generalizedTimeOrderingMatch
        SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
        SINGLE-VALUE )

attributeType ( 1.3.6.1.4.1.22024.1.1.1.3
	NAME 'FQDNRecord'
	DESC 'Special record type for maraDNS that automagically creates the appropriate PTR record'
	SYNTAX 1.3.6.1.4.1.1466.115.121.1.26
	SUBSTR caseIgnoreIA5SubstringsMatch
	SINGLE-VALUE )

# Taken from other schema.  If these are already configured in your LDAP DIT then comment them out in this file
# These DO NOT need to be part of the ldaptor OID range
# From the BIND 9 and / or FreeIPA [113730] and from the UNINETT.no (academic network of Norway) [2428] schema
attributeType ( 2.16.840.1.113730.3.8.5.0
 NAME 'idnsName'
 DESC 'DNS host name'
 EQUALITY caseIgnoreIA5Match
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26
 SUBSTR caseIgnoreIA5SubstringsMatch
 SINGLE-VALUE )

attributeType ( 1.3.6.1.4.1.22024.1.1.1.3
 NAME 'FQDNRecord'
 DESC 'Special record type for maraDNS that automagically creates the appropriate PTR record'
 EQUALITY caseIgnoreIA5Match
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )

attributeTypes: ( 1.3.6.1.4.1.2428.20.0.0
 NAME 'dNSTTL'
 DESC 'An integer denoting time to live'
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
 EQUALITY integerMatch )

attributeTypes: ( 1.3.6.1.4.1.2428.20.1.16
 NAME 'tXTRecord'
 DESC 'text string, RFC 1035'
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch )

attributeTypes: ( 1.3.6.1.4.1.2428.20.1.33
 NAME 'sRVRecord'
 DESC 'service location, RFC 2782'
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch )

attributeTypes: ( 1.3.6.1.4.1.2428.20.1.12
 NAME 'pTRRecord'
 DESC 'domain name pointer, RFC 1035'
 SYNTAX 1.3.6.1.4.1.1466.115.121.1.26
 EQUALITY caseIgnoreIA5Match
 SUBSTR caseIgnoreIA5SubstringsMatch )

# It is suggested that the RDN contains
# both the cn and owner attributes, to
# make it specific enough.
# Note the amount of quoting required
# for this:
#	dn: cn=test+owner=uid\=jdoe\,dc\=example\,dc\=com,dc=example,dc=com
#	objectClass: serviceSecurityObject
#	cn: test
#	owner: uid=jdoe,dc=example,dc=com

objectclass ( 1.3.6.1.4.1.22024.1.1.2.1
	NAME 'serviceSecurityObject'
	DESC 'A service-specific authentication method'
	SUP top STRUCTURAL
	MUST ( cn $ owner $ userPassword )
	MAY ( validFrom $ validUntil ) )

#
# Objects for ldaptor-ldap2maradns
# This represents the different DNS server record types
# The majority of the underlying data is in the cosine.schema

objectclass ( 1.3.6.1.4.1.22924.1.1.2.2
	NAME 'maradnsRecord'
	DESC 'A DNS record of multiple types'
	SUP top
	STRUCTURAL
	MUST idnsName
	MAY ( aRecord $ FQDNRecord $ cNAMERecord $ DNSTTL $ mXRecord $ tXTRecord $ SRVRecord $ nSRecord $ pTRRecord ) )
